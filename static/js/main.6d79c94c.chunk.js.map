{"version":3,"sources":["services/fetchApi.js","pages/Login.jsx","actions/index.js","actions/actionTypes.js","components/Form.jsx","components/Table.jsx","pages/Wallet.jsx","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","index.js"],"names":["fetchApi","a","fetch","response","json","data","console","error","message","EMAIL_FORMAT","Login","checkLoginInputs","state","email","password","match","length","setState","isLoginBtnDisabled","onInputChange","target","name","value","handleSubmit","e","preventDefault","getUserEmail","props","redirect","this","to","onSubmit","className","data-testid","type","placeholder","onChange","disabled","React","Component","connect","dispatch","payload","Form","handleClick","valueInput","descriptionInput","currencies","isDisabled","htmlFor","id","map","crrCurrency","key","wallet","Table","onEraseBtnClick","updateExpensesProp","expenses","updateTotal","upDatedExpenses","filter","expense","expenseToErase","find","description","currency","method","tag","exchangeRates","ask","splitName","split","exchangedValue","Math","round","toFixed","onClick","updatedExpenses","Wallet","fetchCurrencies","addCurrenciesProp","Object","keys","checkValueInput","isExpenseBtnDisabled","generateId","calculateTotal","expensesTotal","newExpense","newValue","fetchApiProp","localCurrency","userEmail","user","fetchApiThunk","App","exact","path","component","Boolean","window","location","hostname","INITIAL_STATE","userReducer","walletReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.6d79c94c.chunk.js","sourcesContent":["const fetchApi = async () => {\n  try {\n    const URL = 'https://economia.awesomeapi.com.br/json/all';\n    const response = await fetch(URL);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(error.message);\n  }\n};\n\nexport default fetchApi;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { userLogin } from '../actions/index';\nimport '../css/login.css';\n\nconst PASSWORD_MIN = 6;\nconst EMAIL_FORMAT = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      email: '',\n      password: '',\n      isLoginBtnDisabled: true,\n      redirect: false,\n    };\n  }\n\n  checkLoginInputs = () => {\n    // verifica se os campos email e senha possuem o formato correto\n    // e habilita o bot√£o caso verdadeiro\n\n    const { email, password } = this.state;\n    if (email.match(EMAIL_FORMAT) && password.length >= PASSWORD_MIN) {\n      this.setState({ isLoginBtnDisabled: false });\n    } else this.setState({ isLoginBtnDisabled: true });\n  };\n\n  onInputChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({ [name]: value }, this.checkLoginInputs);\n  };\n\n  handleSubmit = (e) => {\n    // salva userEmail no estado global e aciona o Redirect\n\n    e.preventDefault();\n    const { email } = this.state;\n    const { getUserEmail } = this.props;\n    getUserEmail(email);\n    this.setState({ redirect: true });\n  }\n\n  render() {\n    const { email, password, isLoginBtnDisabled, redirect } = this.state;\n    if (redirect) return <Redirect to=\"/carteira\" />;\n    return (\n      <form\n        onSubmit={ this.handleSubmit }\n        className=\"login-page__form\"\n      >\n        <h1 className=\"default--title\">TrybeWallet</h1>\n        <input\n          data-testid=\"email-input\"\n          name=\"email\"\n          className=\"default--input\"\n          type=\"email\"\n          placeholder=\"E-mail\"\n          value={ email }\n          onChange={ this.onInputChange }\n        />\n        <input\n          data-testid=\"password-input\"\n          name=\"password\"\n          className=\"default--input\"\n          type=\"password\"\n          placeholder=\"Senha\"\n          value={ password }\n          onChange={ this.onInputChange }\n        />\n        <button\n          type=\"submit\"\n          className=\"default--button\"\n          disabled={ isLoginBtnDisabled }\n        >\n          Entrar\n        </button>\n      </form>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  getUserEmail: (email) => dispatch(userLogin(email)),\n});\n\nLogin.propTypes = {\n  getUserEmail: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import fetchApi from '../services/fetchApi';\nimport {\n  USER_LOGIN, ADD_WALLET_EXPENSES, FETCH_CURRENCIES, UPDATE_EXPENSES,\n} from './actionTypes';\n\nexport const userLogin = (payload) => ({\n  type: USER_LOGIN,\n  payload,\n});\n\nexport const addWalletExpenses = (payload) => ({\n  type: ADD_WALLET_EXPENSES,\n  payload,\n});\n\nexport const addCurrencies = (payload) => ({\n  type: FETCH_CURRENCIES,\n  payload,\n});\n\nexport const updateExpenses = (payload) => ({\n  type: UPDATE_EXPENSES,\n  payload,\n});\n\nexport const fetchApiThunk = (expense) => async (dispatch) => {\n  try {\n    const data = await fetchApi();\n    expense.exchangeRates = data;\n    dispatch(addWalletExpenses(expense));\n  } catch (error) {\n    console.error(error.message);\n  }\n};\n","export const USER_LOGIN = 'USER_LOGIN';\nexport const ADD_WALLET_EXPENSES = 'ADD_WALLET_EXPENSES';\nexport const FETCH_CURRENCIES = 'FETCH_CURRENCIES';\nexport const UPDATE_EXPENSES = 'UPDATE_EXPENSES';\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nclass Form extends React.Component {\n  render() {\n    const {\n      handleClick, valueInput, descriptionInput, onInputChange, currencies, isDisabled,\n    } = this.props;\n\n    return (\n      <form className=\"--menu-aside-form\" onSubmit={ handleClick }>\n        <label\n          className=\"default--input-label\"\n          htmlFor=\"valueInput\"\n        >\n          Valor\n          <input\n            data-testid=\"value-input\"\n            className=\"default--input value\"\n            id=\"valueInput\"\n            name=\"valueInput\"\n            type=\"number\"\n            value={ valueInput }\n            onChange={ onInputChange }\n          />\n        </label>\n\n        <label\n          className=\"default--input-label currency\"\n          htmlFor=\"currency\"\n        >\n          Moeda\n          <select\n            data-testid=\"currency-input\"\n            className=\"default--select\"\n            name=\"currency\"\n            id=\"currency\"\n            onChange={ onInputChange }\n          >\n            {\n              // currencies do estado global da App, alimentado pela API\n              currencies.map((crrCurrency) => (\n                <option\n                  key={ crrCurrency }\n                  value={ crrCurrency }\n                  data-testid={ crrCurrency }\n                >\n                  { crrCurrency }\n                </option>\n              ))\n            }\n          </select>\n        </label>\n\n        <label\n          className=\"default--input-label method\"\n          htmlFor=\"method\"\n        >\n          M√©todo de Pagamento\n          <select\n            data-testid=\"method-input\"\n            className=\"default--select\"\n            name=\"method\"\n            id=\"method\"\n            onChange={ onInputChange }\n          >\n            <option value=\"Dinheiro\">Dinheiro</option>\n            <option value=\"Cart√£o de cr√©dito\">Cart√£o de cr√©dito</option>\n            <option value=\"Cart√£o de d√©bito\">Cart√£o de d√©bito</option>\n          </select>\n        </label>\n\n        <label\n          className=\"default--input-label tag\"\n          htmlFor=\"tag\"\n        >\n          Tag\n          <select\n            data-testid=\"tag-input\"\n            className=\"default--select\"\n            name=\"tag\"\n            id=\"tag\"\n            onChange={ onInputChange }\n          >\n            <option value=\"Alimenta√ß√£o\">Alimenta√ß√£o</option>\n            <option value=\"Lazer\">Lazer</option>\n            <option value=\"Trabalho\">Trabalho</option>\n            <option value=\"Transporte\">Transporte</option>\n            <option value=\"Sa√∫de\">Sa√∫de</option>\n          </select>\n        </label>\n\n        <label\n          className=\"default--input-label description\"\n          htmlFor=\"description\"\n        >\n          Descri√ß√£o\n          <input\n            data-testid=\"description-input\"\n            className=\"default--input\"\n            id=\"description\"\n            name=\"descriptionInput\"\n            type=\"text\"\n            value={ descriptionInput }\n            onChange={ onInputChange }\n          />\n        </label>\n\n        <button\n          type=\"submit\"\n          className=\"default--button button\"\n          disabled={ isDisabled }\n        >\n          Adicionar despesa\n        </button>\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = ({ wallet }) => ({\n  currencies: wallet.currencies,\n});\n\nForm.propTypes = {\n  handleClick: propTypes.func.isRequired,\n  onInputChange: propTypes.func.isRequired,\n  valueInput: propTypes.string.isRequired,\n  descriptionInput: propTypes.string.isRequired,\n  currencies: propTypes.instanceOf(Array).isRequired,\n  isDisabled: propTypes.bool.isRequired,\n};\n\nexport default connect(mapStateToProps)(Form);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport { updateExpenses } from '../actions/index';\n\nconst CURRENCY_EXCHANGE = 'Real';\n\nclass Table extends React.Component {\n  onEraseBtnClick = (id) => {\n    const { updateExpensesProp, expenses, updateTotal } = this.props;\n    const upDatedExpenses = expenses.filter((expense) => expense.id !== id);\n    const expenseToErase = expenses.find((expense) => expense.id === id);\n    updateExpensesProp(upDatedExpenses); // mapDispatchToProps\n    updateTotal(expenseToErase);\n  }\n\n  render() {\n    const { expenses } = this.props;\n    return (\n      <table className=\"wallet__page--table\">\n        <thead className=\"table--header\">\n          <tr>\n            <th>Descri√ß√£o</th>\n            <th>Tag</th>\n            <th>M√©todo de pagamento</th>\n            <th>Valor</th>\n            <th>Moeda</th>\n            <th>C√¢mbio utilizado</th>\n            <th>Valor convertido</th>\n            <th>Moeda de convers√£o</th>\n            <th>Editar/Excluir</th>\n          </tr>\n        </thead>\n        <tbody className=\"table--body\">\n          {\n            expenses.map((expense) => {\n              const {\n                description, currency, value, method, tag, exchangeRates, id } = expense;\n              const { ask, name } = exchangeRates[currency];\n              const splitName = name.split('/');\n              const exchangedValue = value * ask;\n\n              return (\n                <tr key={ id }>\n                  <td>{ description }</td>\n                  <td>{ tag }</td>\n                  <td>{ method }</td>\n                  <td>{ (Math.round(value * 100) / 100).toFixed(2) }</td>\n                  <td>{ splitName[0] }</td>\n                  <td>{ (Math.round(ask * 100) / 100).toFixed(2) }</td>\n                  <td>{ (Math.round(exchangedValue * 100) / 100).toFixed(2) }</td>\n                  <td>{ CURRENCY_EXCHANGE }</td>\n                  <td>\n                    <button\n                      data-testid=\"delete-btn\"\n                      type=\"button\"\n                      className=\"default--erase-btn\"\n                      onClick={ () => this.onEraseBtnClick(id) }\n                    >\n                      X\n                    </button>\n                  </td>\n                </tr>\n              );\n            })\n          }\n        </tbody>\n      </table>\n    );\n  }\n}\n\nconst mapStateToProps = ({ wallet }) => ({\n  expenses: wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateExpensesProp: (updatedExpenses) => dispatch(updateExpenses(updatedExpenses)),\n});\n\nTable.propTypes = {\n  expenses: propTypes.instanceOf(Array).isRequired,\n  updateExpensesProp: propTypes.func.isRequired,\n  updateTotal: propTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchApiThunk, addCurrencies } from '../actions/index';\nimport fetchApi from '../services/fetchApi';\nimport Form from '../components/Form';\nimport Table from '../components/Table';\nimport '../css/wallet.css';\n\nclass Wallet extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      expensesTotal: 0,\n      localCurrency: 'BRL',\n      valueInput: '',\n      descriptionInput: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimenta√ß√£o',\n      isExpenseBtnDisabled: true,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchCurrencies();\n  }\n\n  fetchCurrencies = async () => {\n    // abastece a chave currencies no estado global, para dar as op√ß√£o de moedas que vem na API\n\n    const { addCurrenciesProp } = this.props;\n    const response = await fetchApi();\n    const data = Object.keys(response);\n    const currencies = data.filter((currency) => currency !== 'USDT');\n    addCurrenciesProp(currencies); // mapStateToProp\n  }\n\n  checkValueInput = () => {\n    // desabilita bot√£o caso valueInput esteja vazio\n    const { valueInput } = this.state;\n    if (valueInput > 0.00) {\n      this.setState({ isExpenseBtnDisabled: false });\n    } else this.setState({ isExpenseBtnDisabled: true });\n  }\n\n  onInputChange = ({ target }) => {\n    // √© passado por props para o componente Form\n    const { name, value } = target;\n    this.setState({ [name]: value }, this.checkValueInput);\n  }\n\n  generateId = (expenses) => {\n    const id = expenses.length;\n    return id;\n  }\n\n  calculateTotal = (expense) => {\n    const { exchangeRates, currency, value } = expense;\n    const { expensesTotal } = this.state;\n    const { ask } = exchangeRates[currency];\n    const newExpense = value * ask;\n    this.setState({ expensesTotal: expensesTotal + newExpense });\n  }\n\n  updateTotal = (expense) => {\n    const { expensesTotal } = this.state;\n    const { exchangeRates, currency, value } = expense;\n    const { ask } = exchangeRates[currency];\n    const valueToErase = value * ask;\n    const newValue = expensesTotal - valueToErase;\n    this.setState({ expensesTotal: newValue });\n  }\n\n  handleClick = async (e) => {\n    // expense deve ir j√° com a chave exchangeRates que ser√° um objeto vazio preenchido ap√≥s a chamada da API.\n    e.preventDefault();\n    const { fetchApiProp, expenses } = this.props;\n    const { valueInput, descriptionInput, currency, method, tag } = this.state;\n    const id = this.generateId(expenses);\n    const expense = {\n      id,\n      value: valueInput,\n      description: descriptionInput,\n      currency,\n      method,\n      tag,\n      exchangeRates: {},\n    };\n    await fetchApiProp(expense); // mapDispatchToProps\n    this.calculateTotal(expense);\n    this.setState({ valueInput: '', descriptionInput: '' }, this.checkValueInput);\n  }\n\n  render() {\n    const {\n      expensesTotal,\n      localCurrency,\n      valueInput,\n      descriptionInput,\n      isExpenseBtnDisabled,\n    } = this.state;\n    const { userEmail } = this.props;\n    return (\n      <div className=\"wallet__page\">\n        <header className=\"wallet__page--header\">\n          <h1 className=\"__header--title\">TrybeWallet</h1>\n          <section className=\"__header--section\">\n            <div className=\"__header--div\">\n              <span\n                data-testid=\"email-field\"\n                className=\"--div-span-email\"\n              >\n                {`User: ${userEmail}` }\n              </span>\n            </div>\n            <div className=\"__header--div\">\n              <p>Despesa total: </p>\n              <span\n                data-testid=\"total-field\"\n                className=\"--div-span-total\"\n              >\n                { `${(Math.round(expensesTotal * 100) / 100).toFixed(2)}` }\n              </span>\n            </div>\n            <span\n              data-testid=\"header-currency-field\"\n              className=\"--div-span-currency\"\n            >\n              { localCurrency }\n            </span>\n          </section>\n        </header>\n        <aside className=\"wallet__page--menu-aside\">\n          <Form\n            handleClick={ this.handleClick }\n            onInputChange={ this.onInputChange }\n            valueInput={ valueInput }\n            descriptionInput={ descriptionInput }\n            isDisabled={ isExpenseBtnDisabled }\n          />\n        </aside>\n        <Table updateTotal={ this.updateTotal } />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ user, wallet }) => ({\n  userEmail: user.email,\n  currencies: wallet.currencies,\n  expenses: wallet.expenses,\n  expensesTotal: wallet.expensesTotal,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchApiProp: (expense) => dispatch(fetchApiThunk(expense)),\n  addCurrenciesProp: (currencies) => dispatch(addCurrencies(currencies)),\n});\n\nWallet.propTypes = {\n  userEmail: propTypes.string.isRequired,\n  expenses: propTypes.instanceOf(Array).isRequired,\n  fetchApiProp: propTypes.func.isRequired,\n  addCurrenciesProp: propTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\nimport './default.css';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={ Login } />\n      <Route path=\"/carteira\" component={ Wallet } />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Esse reducer ser√° respons√°vel por tratar as informa√ß√µes da pessoa usu√°ria\n\nconst INITIAL_STATE = {\n  email: '',\n};\n\nconst userReducer = (state = INITIAL_STATE, { type, payload }) => {\n  switch (type) {\n  case 'USER_LOGIN':\n    return {\n      ...state,\n      email: payload,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default userReducer;\n","// Esse reducer ser√° respons√°vel por tratar o todas as informa√ß√µes relacionadas as despesas\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n};\n\nconst walletReducer = (state = INITIAL_STATE, { type, payload }) => {\n  switch (type) {\n  case 'ADD_WALLET_EXPENSES':\n    return {\n      ...state,\n      expenses: [...state.expenses, payload],\n    };\n  case 'UPDATE_EXPENSES':\n    return {\n      ...state,\n      expenses: payload,\n    };\n  case 'FETCH_CURRENCIES':\n    return {\n      ...state,\n      currencies: payload,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default walletReducer;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\nconst rootReducer = combineReducers({\n  user,\n  wallet,\n});\n\n// Configure os seus reducers.\n// ATEN√á√ÉO: voc√™ obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers/index';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store/index';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}